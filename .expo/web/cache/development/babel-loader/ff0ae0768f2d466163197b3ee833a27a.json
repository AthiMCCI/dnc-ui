{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\nvar manifest = null;\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\nif (NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    manifest = devLauncherManifest;\n  }\n}\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\nvar _ref = ExponentConstants || {},\n  name = _ref.name,\n  appOwnership = _ref.appOwnership,\n  nativeConstants = _objectWithoutProperties(_ref, [\"name\", \"appOwnership\"]);\nvar warnedAboutInstallationId = false;\nvar warnedAboutDeviceId = false;\nvar warnedAboutLinkingUrl = false;\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null,\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\"Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.\");\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\"Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.\");\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\"Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.\");\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  }\n});\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (!manifest) {\n    var invalidManifestType = manifest === null ? 'null' : 'undefined';\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(\"Constants.manifest is \" + invalidManifestType + \" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', \"Constants.manifest is \" + invalidManifestType + \", must be an object.\");\n    }\n  }\n  return manifest;\n}\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get: function get() {\n      return getManifest();\n    },\n    set: function set(value) {\n      manifest = value;\n    }\n  },\n  __unsafeNoWarnManifest: {\n    enumerable: true,\n    get: function get() {\n      return getManifest(true);\n    }\n  }\n});\nexport default constants;","map":{"version":3,"mappings":"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","names":["CodedError","NativeModulesProxy","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","manifest","ExpoUpdates","updatesManifest","manifestString","JSON","parse","Object","keys","length","NativeModules","EXDevLauncher","devLauncherManifest","name","appOwnership","nativeConstants","warnedAboutInstallationId","warnedAboutDeviceId","warnedAboutLinkingUrl","constants","installationId","deviceId","linkingUrl","linkingUri","getManifest","suppressWarning","invalidManifestType","executionEnvironment","Bare","Platform","OS","StoreClient","Standalone","defineProperties","enumerable","get","set","value","__unsafeNoWarnManifest"],"sourceRoot":"","sources":["../src/Constants.ts"],"sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet manifest = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    manifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    manifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!manifest && ExponentConstants && ExponentConstants.manifest) {\n  manifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof manifest === 'string') {\n    manifest = JSON.parse(manifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Deprecated fields\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n} as Constants;\n\nfunction getManifest(suppressWarning = false) {\n  if (!manifest) {\n    const invalidManifestType = manifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return manifest;\n}\n\nObject.defineProperties(constants, {\n  manifest: {\n    enumerable: true,\n    get() {\n      return getManifest();\n    },\n    // This setter is only useful to mock the value for tests\n    set(value) {\n      manifest = value;\n    },\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    enumerable: true,\n    get() {\n      return getManifest(true);\n    },\n  },\n});\n\nexport default constants as Constants;\n"]},"metadata":{},"sourceType":"module"}