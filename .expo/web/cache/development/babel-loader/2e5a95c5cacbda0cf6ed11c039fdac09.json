{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport { NavigationHelpersContext, NavigationContext, NavigationRouteContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Header from \"./Header\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nimport getIsDrawerOpenFromState from \"../utils/getIsDrawerOpenFromState\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    _ref2$lazy = _ref2.lazy,\n    lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$drawerPosition = _ref2.drawerPosition,\n    drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n    _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n    keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n    _ref2$overlayColor = _ref2.overlayColor,\n    overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n    _ref2$drawerType = _ref2.drawerType,\n    drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n    _ref2$hideStatusBar = _ref2.hideStatusBar,\n    hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n    _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n    statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n    drawerContentOptions = _ref2.drawerContentOptions,\n    drawerStyle = _ref2.drawerStyle,\n    edgeWidth = _ref2.edgeWidth,\n    gestureHandlerProps = _ref2.gestureHandlerProps,\n    minSwipeDistance = _ref2.minSwipeDistance,\n    sceneContainerStyle = _ref2.sceneContainerStyle,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n  var _React$useState = React.useState([state.routes[state.index].key]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  var dimensions = useWindowDimensions();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var isDrawerOpen = getIsDrawerOpenFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n    var handleClose = function handleClose() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      handleDrawerClose();\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleClose);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n  var focusedRouteKey = state.routes[state.index].key;\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n  var renderContent = function renderContent() {\n    var isScreensEnabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n    return (\n      React.createElement(ScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.content\n      }, state.routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var unmountOnBlur = descriptor.options.unmountOnBlur;\n        var isFocused = state.index === index;\n        if (unmountOnBlur && !isFocused) {\n          return null;\n        }\n        if (lazy && !loaded.includes(route.key) && !isFocused) {\n          return null;\n        }\n        var _descriptor$options = descriptor.options,\n          _descriptor$options$h = _descriptor$options.header,\n          header = _descriptor$options$h === void 0 ? function (props) {\n            return React.createElement(Header, props);\n          } : _descriptor$options$h,\n          _descriptor$options$h2 = _descriptor$options.headerShown,\n          headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n        return React.createElement(ResourceSavingScene, {\n          key: route.key,\n          style: [StyleSheet.absoluteFill, {\n            opacity: isFocused ? 1 : 0\n          }],\n          isVisible: isFocused,\n          enabled: isScreensEnabled\n        }, headerShown ? React.createElement(NavigationContext.Provider, {\n          value: descriptor.navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, header({\n          layout: dimensions,\n          scene: {\n            route: route,\n            descriptor: descriptor\n          }\n        }))) : null, descriptor.render());\n      }))\n    );\n  };\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n    gestureEnabled = _descriptors$activeKe.gestureEnabled,\n    swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","ScreenContainer","screensEnabled","NavigationHelpersContext","NavigationContext","NavigationRouteContext","DrawerActions","useTheme","GestureHandlerRootView","SafeAreaProviderCompat","ResourceSavingScene","Header","DrawerContent","Drawer","DrawerOpenContext","DrawerPositionContext","useWindowDimensions","getIsDrawerOpenFromState","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","detachInactiveScreens","useState","routes","index","key","loaded","setLoaded","dimensions","colors","isDrawerOpen","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleClose","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","focusedRouteKey","includes","renderNavigationView","progress","Provider","value","renderContent","isScreensEnabled","enabled","style","styles","content","map","route","descriptor","unmountOnBlur","options","header","headerShown","StyleSheet","absoluteFill","opacity","isVisible","layout","scene","render","activeKey","gestureEnabled","swipeEnabled","open","onOpen","onClose","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderSceneContent","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n} from 'react-native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleClose = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleClose\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={isScreensEnabled} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={isScreensEnabled}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}